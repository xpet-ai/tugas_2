{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xpet-ai/tugas_2/blob/main/pengalaan%20pola%20kelompok%209\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "id": "KeiQvUI2oBMu",
        "outputId": "44c71025-96dd-4e7f-f542-a6844ea7d040"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-7c359780-af5e-458f-8a8a-c08e1178d482\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-7c359780-af5e-458f-8a8a-c08e1178d482\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving archive (2).zip to archive (2).zip\n",
            "User uploaded file \"archive (2).zip\" with length 63252113 bytes\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "for fn in uploaded.keys():\n",
        "  print('User uploaded file \"{name}\" with length {length} bytes'.format(\n",
        "      name=fn, length=len(uploaded[fn])))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XEvvvkq3rRQN",
        "outputId": "147dd1d2-d839-4dbf-d325-dfd6e28d3493"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Done\n"
          ]
        }
      ],
      "source": [
        "from zipfile import ZipFile\n",
        "file_name = \"archive (2).zip\"\n",
        "\n",
        "with ZipFile(file_name, 'r') as zip:\n",
        "  zip.extractall()\n",
        "  print(\"Done\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KUSt72d7rT2j"
      },
      "outputs": [],
      "source": [
        "import numpy as np #Ini berguna untuk mengelola data dalam format array\n",
        "import cv2  # Mengimpor OpenCV\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, Flatten\n",
        "from tensorflow.keras.layers import Conv2D\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.layers import MaxPooling2D\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OvdsiDyvrZPj",
        "outputId": "9abacf9d-43f1-47d4-db09-9f0e56db5dbc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 28709 images belonging to 7 classes.\n",
            "Found 7178 images belonging to 7 classes.\n"
          ]
        }
      ],
      "source": [
        "train_dir = 'train'\n",
        "val_dir = 'test'\n",
        "train_datagen = ImageDataGenerator(rescale=1./255)\n",
        "val_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        train_dir,\n",
        "        target_size=(48,48),\n",
        "        batch_size=64,\n",
        "        color_mode=\"grayscale\",\n",
        "        class_mode='categorical')\n",
        "\n",
        "validation_generator = val_datagen.flow_from_directory(\n",
        "        val_dir,\n",
        "        target_size=(48,48),\n",
        "        batch_size=64,\n",
        "        color_mode=\"grayscale\",\n",
        "        class_mode='categorical')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y92P3FbyrnCy"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Input\n",
        "\n",
        "# Model arsitektur\n",
        "emotion_model = Sequential([\n",
        "    Input(shape=(48, 48, 1)),  # Definisi input menggunakan Input()\n",
        "    Conv2D(32, kernel_size=(3, 3), activation='relu'),\n",
        "    Conv2D(64, kernel_size=(3, 3), activation='relu'),\n",
        "    MaxPooling2D(pool_size=(2, 2)),\n",
        "    Dropout(0.25),\n",
        "    Conv2D(128, kernel_size=(3, 3), activation='relu'),\n",
        "    MaxPooling2D(pool_size=(2, 2)),\n",
        "    Conv2D(128, kernel_size=(3, 3), activation='relu'),\n",
        "    MaxPooling2D(pool_size=(2, 2)),\n",
        "    Dropout(0.25),\n",
        "    Flatten(),\n",
        "    Dense(1024, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(7, activation='softmax')  # Output untuk 7 kelas\n",
        "])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t5wohpvFanfu",
        "outputId": "3a618292-d65f-4b6f-810c-b0386fbd54c7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset directory exists.\n",
            "Kelas 'disgust' memiliki 111 file.\n",
            "Kelas 'surprise' memiliki 831 file.\n",
            "Kelas 'angry' memiliki 958 file.\n",
            "Kelas 'happy' memiliki 1774 file.\n",
            "Kelas 'fear' memiliki 1024 file.\n",
            "Kelas 'sad' memiliki 1247 file.\n",
            "Kelas 'neutral' memiliki 1233 file.\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "dataset_dir = '/content/test'\n",
        "if os.path.exists(dataset_dir):\n",
        "    print(\"Dataset directory exists.\")\n",
        "    for class_name in os.listdir(dataset_dir):\n",
        "        class_path = os.path.join(dataset_dir, class_name)\n",
        "        if os.path.isdir(class_path):\n",
        "            print(f\"Kelas '{class_name}' memiliki {len(os.listdir(class_path))} file.\")\n",
        "else:\n",
        "    print(\"Dataset tidak ditemukan. Periksa path Anda.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CO0XwrS5bFvZ",
        "outputId": "c2cb942e-e5cf-4f0b-db97-9d7784cdf5ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah data pada training:\n",
            "Kelas 'disgust' memiliki 436 file.\n",
            "Kelas 'surprise' memiliki 3171 file.\n",
            "Kelas 'angry' memiliki 3995 file.\n",
            "Kelas 'happy' memiliki 7215 file.\n",
            "Kelas 'fear' memiliki 4097 file.\n",
            "Kelas 'sad' memiliki 4830 file.\n",
            "Kelas 'neutral' memiliki 4965 file.\n",
            "Total data training: 28709 images\n",
            "\n",
            "Jumlah data pada testing:\n",
            "Kelas 'disgust' memiliki 111 file.\n",
            "Kelas 'surprise' memiliki 831 file.\n",
            "Kelas 'angry' memiliki 958 file.\n",
            "Kelas 'happy' memiliki 1774 file.\n",
            "Kelas 'fear' memiliki 1024 file.\n",
            "Kelas 'sad' memiliki 1247 file.\n",
            "Kelas 'neutral' memiliki 1233 file.\n",
            "Total data testing: 7178 images\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "def count_files_in_directory(directory):\n",
        "    \"\"\"Fungsi untuk menghitung jumlah file dalam setiap subfolder pada directory.\"\"\"\n",
        "    total_files = 0\n",
        "    for class_name in os.listdir(directory):  # Iterasi setiap kelas dalam directory\n",
        "        class_path = os.path.join(directory, class_name)  # Gabungkan path untuk subfolder\n",
        "        if os.path.isdir(class_path):  # Jika itu adalah folder\n",
        "            num_files = len(os.listdir(class_path))  # Hitung jumlah file dalam folder\n",
        "            print(f\"Kelas '{class_name}' memiliki {num_files} file.\")\n",
        "            total_files += num_files\n",
        "    return total_files\n",
        "\n",
        "# Tentukan path ke folder train dan test\n",
        "train_dir = '/content/train'  # Ganti dengan path folder train Anda\n",
        "test_dir = '/content/test'  # Ganti dengan path folder test Anda\n",
        "\n",
        "# Hitung jumlah file di folder train dan test\n",
        "print(\"Jumlah data pada training:\")\n",
        "train_total = count_files_in_directory(train_dir)\n",
        "print(f\"Total data training: {train_total} images\\n\")\n",
        "\n",
        "print(\"Jumlah data pada testing:\")\n",
        "test_total = count_files_in_directory(test_dir)\n",
        "print(f\"Total data testing: {test_total} images\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5UeuDW62Xyhp",
        "outputId": "1b8470a2-405d-41e2-ecff-ebf59dc360de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 45ms/step - accuracy: 0.3890 - loss: 1.6888 - val_accuracy: 0.5603 - val_loss: 1.2485\n",
            "Epoch 2/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 44ms/step - accuracy: 0.5839 - loss: 1.1920 - val_accuracy: 0.6248 - val_loss: 1.0816\n",
            "Epoch 3/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 42ms/step - accuracy: 0.6401 - loss: 1.0477 - val_accuracy: 0.6495 - val_loss: 1.0172\n",
            "Epoch 4/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 43ms/step - accuracy: 0.6726 - loss: 0.9521 - val_accuracy: 0.6586 - val_loss: 1.0085\n",
            "Epoch 5/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 44ms/step - accuracy: 0.6932 - loss: 0.8923 - val_accuracy: 0.6712 - val_loss: 0.9674\n",
            "Epoch 6/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 42ms/step - accuracy: 0.7121 - loss: 0.8416 - val_accuracy: 0.6678 - val_loss: 0.9727\n",
            "Epoch 7/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 42ms/step - accuracy: 0.7216 - loss: 0.8102 - val_accuracy: 0.6900 - val_loss: 0.8967\n",
            "Epoch 8/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 43ms/step - accuracy: 0.7315 - loss: 0.7770 - val_accuracy: 0.6947 - val_loss: 0.9002\n",
            "Epoch 9/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 43ms/step - accuracy: 0.7427 - loss: 0.7443 - val_accuracy: 0.6968 - val_loss: 0.8859\n",
            "Epoch 10/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 44ms/step - accuracy: 0.7574 - loss: 0.7126 - val_accuracy: 0.7032 - val_loss: 0.8813\n",
            "Epoch 11/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 44ms/step - accuracy: 0.7620 - loss: 0.6958 - val_accuracy: 0.7040 - val_loss: 0.8838\n",
            "Epoch 12/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 43ms/step - accuracy: 0.7635 - loss: 0.6841 - val_accuracy: 0.6947 - val_loss: 0.9214\n",
            "Epoch 13/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 44ms/step - accuracy: 0.7779 - loss: 0.6530 - val_accuracy: 0.7008 - val_loss: 0.8911\n",
            "Epoch 14/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 45ms/step - accuracy: 0.7779 - loss: 0.6488 - val_accuracy: 0.6944 - val_loss: 0.9308\n",
            "Epoch 15/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 43ms/step - accuracy: 0.7851 - loss: 0.6234 - val_accuracy: 0.7051 - val_loss: 0.8961\n",
            "Epoch 16/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 43ms/step - accuracy: 0.7910 - loss: 0.6111 - val_accuracy: 0.7074 - val_loss: 0.9081\n",
            "Epoch 17/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 42ms/step - accuracy: 0.7921 - loss: 0.6069 - val_accuracy: 0.7002 - val_loss: 0.9067\n",
            "Epoch 18/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 44ms/step - accuracy: 0.7985 - loss: 0.5802 - val_accuracy: 0.7059 - val_loss: 0.9166\n",
            "Epoch 19/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m67s\u001b[0m 43ms/step - accuracy: 0.8027 - loss: 0.5677 - val_accuracy: 0.6953 - val_loss: 0.9466\n",
            "Epoch 20/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 43ms/step - accuracy: 0.8041 - loss: 0.5633 - val_accuracy: 0.7121 - val_loss: 0.9188\n",
            "Epoch 21/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 44ms/step - accuracy: 0.8098 - loss: 0.5490 - val_accuracy: 0.6968 - val_loss: 0.9582\n",
            "Epoch 22/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 44ms/step - accuracy: 0.8157 - loss: 0.5385 - val_accuracy: 0.6967 - val_loss: 0.9916\n",
            "Epoch 23/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 43ms/step - accuracy: 0.8122 - loss: 0.5380 - val_accuracy: 0.7064 - val_loss: 0.9572\n",
            "Epoch 24/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 44ms/step - accuracy: 0.8184 - loss: 0.5268 - val_accuracy: 0.7056 - val_loss: 0.9572\n",
            "Epoch 25/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 44ms/step - accuracy: 0.8188 - loss: 0.5150 - val_accuracy: 0.6960 - val_loss: 0.9824\n",
            "Epoch 26/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 43ms/step - accuracy: 0.8252 - loss: 0.5029 - val_accuracy: 0.6998 - val_loss: 0.9844\n",
            "Epoch 27/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 43ms/step - accuracy: 0.8240 - loss: 0.5009 - val_accuracy: 0.6896 - val_loss: 1.0285\n",
            "Epoch 28/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 44ms/step - accuracy: 0.8276 - loss: 0.4955 - val_accuracy: 0.6858 - val_loss: 1.0684\n",
            "Epoch 29/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 44ms/step - accuracy: 0.8294 - loss: 0.4841 - val_accuracy: 0.7054 - val_loss: 1.0080\n",
            "Epoch 30/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m86s\u001b[0m 47ms/step - accuracy: 0.8323 - loss: 0.4740 - val_accuracy: 0.6996 - val_loss: 1.0138\n",
            "Epoch 31/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m77s\u001b[0m 44ms/step - accuracy: 0.8341 - loss: 0.4722 - val_accuracy: 0.7007 - val_loss: 1.0357\n",
            "Epoch 32/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 43ms/step - accuracy: 0.8411 - loss: 0.4598 - val_accuracy: 0.6937 - val_loss: 1.0712\n",
            "Epoch 33/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 44ms/step - accuracy: 0.8399 - loss: 0.4600 - val_accuracy: 0.6926 - val_loss: 1.0601\n",
            "Epoch 34/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 44ms/step - accuracy: 0.8419 - loss: 0.4467 - val_accuracy: 0.6928 - val_loss: 1.0855\n",
            "Epoch 35/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 44ms/step - accuracy: 0.8423 - loss: 0.4548 - val_accuracy: 0.6959 - val_loss: 1.0865\n",
            "Epoch 36/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 43ms/step - accuracy: 0.8465 - loss: 0.4381 - val_accuracy: 0.6905 - val_loss: 1.1519\n",
            "Epoch 37/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 43ms/step - accuracy: 0.8488 - loss: 0.4299 - val_accuracy: 0.6947 - val_loss: 1.0966\n",
            "Epoch 38/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 42ms/step - accuracy: 0.8458 - loss: 0.4347 - val_accuracy: 0.6955 - val_loss: 1.0995\n",
            "Epoch 39/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 43ms/step - accuracy: 0.8529 - loss: 0.4243 - val_accuracy: 0.6922 - val_loss: 1.1115\n",
            "Epoch 40/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 44ms/step - accuracy: 0.8543 - loss: 0.4178 - val_accuracy: 0.6896 - val_loss: 1.1397\n",
            "Epoch 41/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 43ms/step - accuracy: 0.8519 - loss: 0.4181 - val_accuracy: 0.6857 - val_loss: 1.1736\n",
            "Epoch 42/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 43ms/step - accuracy: 0.8598 - loss: 0.3986 - val_accuracy: 0.6915 - val_loss: 1.1430\n",
            "Epoch 43/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 44ms/step - accuracy: 0.8584 - loss: 0.4021 - val_accuracy: 0.6831 - val_loss: 1.1712\n",
            "Epoch 44/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 44ms/step - accuracy: 0.8600 - loss: 0.3949 - val_accuracy: 0.6886 - val_loss: 1.1758\n",
            "Epoch 45/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 44ms/step - accuracy: 0.8633 - loss: 0.3868 - val_accuracy: 0.6886 - val_loss: 1.2020\n",
            "Epoch 46/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 44ms/step - accuracy: 0.8633 - loss: 0.3843 - val_accuracy: 0.6923 - val_loss: 1.2080\n",
            "Epoch 47/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 43ms/step - accuracy: 0.8664 - loss: 0.3778 - val_accuracy: 0.6788 - val_loss: 1.2483\n",
            "Epoch 48/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 43ms/step - accuracy: 0.8661 - loss: 0.3807 - val_accuracy: 0.6863 - val_loss: 1.2251\n",
            "Epoch 49/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 44ms/step - accuracy: 0.8671 - loss: 0.3682 - val_accuracy: 0.6861 - val_loss: 1.2366\n",
            "Epoch 50/50\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 44ms/step - accuracy: 0.8696 - loss: 0.3716 - val_accuracy: 0.6815 - val_loss: 1.2471\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loss: 1.2470512390136719\n",
            "Akurasi: 0.6815000176429749\n"
          ]
        }
      ],
      "source": [
        "# Import library yang diperlukan\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "\n",
        "# Definisikan arsitektur model\n",
        "model = Sequential()\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "# Kompilasi model\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Muat dataset\n",
        "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()\n",
        "\n",
        "# Pra-proses data\n",
        "x_train = x_train.astype('float32') / 255.0\n",
        "x_test = x_test.astype('float32') / 255.0\n",
        "\n",
        "# Latih model\n",
        "model.fit(x_train, y_train, epochs=50, batch_size=32, validation_data=(x_test, y_test))\n",
        "\n",
        "# Evaluasi model\n",
        "loss, accuracy = model.evaluate(x_test, y_test, verbose=0)\n",
        "print('Loss:', loss)\n",
        "print('Akurasi:', accuracy)\n",
        "\n",
        "# Simpan model\n",
        "model.save('cifar10_model.h5')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Input\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Membuat model\n",
        "emotion_model = Sequential([\n",
        "    Input(shape=(48, 48, 1)),  # Input dengan ukuran (48x48 grayscale)\n",
        "    Conv2D(32, kernel_size=(3, 3), activation='relu'),\n",
        "    Conv2D(64, kernel_size=(3, 3), activation='relu'),\n",
        "    MaxPooling2D(pool_size=(2, 2)),\n",
        "    Dropout(0.25),\n",
        "    Conv2D(128, kernel_size=(3, 3), activation='relu'),\n",
        "    MaxPooling2D(pool_size=(2, 2)),\n",
        "    Conv2D(128, kernel_size=(3, 3), activation='relu'),\n",
        "    MaxPooling2D(pool_size=(2, 2)),\n",
        "    Dropout(0.25),\n",
        "    Flatten(),\n",
        "    Dense(1024, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(7, activation='softmax')  # Output untuk 7 kelas\n",
        "])\n",
        "\n",
        "# Kompilasi model\n",
        "emotion_model.compile(\n",
        "    optimizer=Adam(learning_rate=0.001),  # Optimizer Adam\n",
        "    loss='categorical_crossentropy',     # Fungsi loss untuk klasifikasi multi-kelas\n",
        "    metrics=['accuracy']                 # Evaluasi dengan akurasi\n",
        ")\n"
      ],
      "metadata": {
        "id": "fYl6TFv74Pfe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Melatih model\n",
        "history = emotion_model.fit(\n",
        "    train_generator,\n",
        "    steps_per_epoch=train_generator.samples // train_generator.batch_size,\n",
        "    epochs=50,  # Jumlah epoch\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=validation_generator.samples // validation_generator.batch_size\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fs9QHcU_4tGf",
        "outputId": "3e560dda-1939-45d6-db74-5600dab5d6bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m281s\u001b[0m 1s/step - accuracy: 0.2456 - loss: 1.8141 - val_accuracy: 0.3473 - val_loss: 1.6380\n",
            "Epoch 2/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 767us/step - accuracy: 0.1250 - loss: 1.7590 - val_accuracy: 0.2444 - val_loss: 1.7661\n",
            "Epoch 3/50\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n",
            "  self.gen.throw(typ, value, traceback)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m274s\u001b[0m 1s/step - accuracy: 0.3676 - loss: 1.6178 - val_accuracy: 0.4352 - val_loss: 1.4497\n",
            "Epoch 4/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 617us/step - accuracy: 0.4844 - loss: 1.4166 - val_accuracy: 0.4667 - val_loss: 1.5596\n",
            "Epoch 5/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m268s\u001b[0m 998ms/step - accuracy: 0.4518 - loss: 1.4337 - val_accuracy: 0.4928 - val_loss: 1.3450\n",
            "Epoch 6/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 634us/step - accuracy: 0.5156 - loss: 1.1739 - val_accuracy: 0.4000 - val_loss: 1.3351\n",
            "Epoch 7/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m269s\u001b[0m 1s/step - accuracy: 0.5015 - loss: 1.3138 - val_accuracy: 0.5100 - val_loss: 1.2854\n",
            "Epoch 8/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 640us/step - accuracy: 0.5469 - loss: 1.1716 - val_accuracy: 0.6000 - val_loss: 1.1999\n",
            "Epoch 9/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m276s\u001b[0m 1s/step - accuracy: 0.5201 - loss: 1.2509 - val_accuracy: 0.5265 - val_loss: 1.2473\n",
            "Epoch 10/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 617us/step - accuracy: 0.5156 - loss: 1.2118 - val_accuracy: 0.5556 - val_loss: 1.1680\n",
            "Epoch 11/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m273s\u001b[0m 1s/step - accuracy: 0.5514 - loss: 1.1815 - val_accuracy: 0.5488 - val_loss: 1.1997\n",
            "Epoch 12/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 621us/step - accuracy: 0.4375 - loss: 1.2756 - val_accuracy: 0.5556 - val_loss: 1.4113\n",
            "Epoch 13/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m269s\u001b[0m 1s/step - accuracy: 0.5639 - loss: 1.1429 - val_accuracy: 0.5458 - val_loss: 1.1832\n",
            "Epoch 14/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 71ms/step - accuracy: 0.5781 - loss: 1.1242 - val_accuracy: 0.5556 - val_loss: 1.2641\n",
            "Epoch 15/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m268s\u001b[0m 995ms/step - accuracy: 0.5974 - loss: 1.0762 - val_accuracy: 0.5597 - val_loss: 1.1692\n",
            "Epoch 16/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 72ms/step - accuracy: 0.5781 - loss: 1.1701 - val_accuracy: 0.5778 - val_loss: 1.1818\n",
            "Epoch 17/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m305s\u001b[0m 1s/step - accuracy: 0.6039 - loss: 1.0447 - val_accuracy: 0.5583 - val_loss: 1.1784\n",
            "Epoch 18/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 624us/step - accuracy: 0.5625 - loss: 1.0358 - val_accuracy: 0.4222 - val_loss: 1.5142\n",
            "Epoch 19/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m268s\u001b[0m 997ms/step - accuracy: 0.6178 - loss: 1.0130 - val_accuracy: 0.5600 - val_loss: 1.1834\n",
            "Epoch 20/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 606us/step - accuracy: 0.5781 - loss: 1.0382 - val_accuracy: 0.4889 - val_loss: 1.4810\n",
            "Epoch 21/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m320s\u001b[0m 994ms/step - accuracy: 0.6342 - loss: 0.9695 - val_accuracy: 0.5564 - val_loss: 1.1693\n",
            "Epoch 22/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 635us/step - accuracy: 0.7188 - loss: 0.7593 - val_accuracy: 0.6000 - val_loss: 1.1015\n",
            "Epoch 23/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m266s\u001b[0m 988ms/step - accuracy: 0.6555 - loss: 0.9198 - val_accuracy: 0.5734 - val_loss: 1.1429\n",
            "Epoch 24/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 675us/step - accuracy: 0.6719 - loss: 0.8663 - val_accuracy: 0.6444 - val_loss: 0.9027\n",
            "Epoch 25/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m325s\u001b[0m 1s/step - accuracy: 0.6798 - loss: 0.8641 - val_accuracy: 0.5760 - val_loss: 1.1440\n",
            "Epoch 26/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 639us/step - accuracy: 0.7344 - loss: 0.7220 - val_accuracy: 0.5556 - val_loss: 1.0570\n",
            "Epoch 27/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m268s\u001b[0m 994ms/step - accuracy: 0.6815 - loss: 0.8588 - val_accuracy: 0.5679 - val_loss: 1.2066\n",
            "Epoch 28/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 613us/step - accuracy: 0.6875 - loss: 0.8332 - val_accuracy: 0.4444 - val_loss: 1.6442\n",
            "Epoch 29/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m319s\u001b[0m 987ms/step - accuracy: 0.6953 - loss: 0.8184 - val_accuracy: 0.5699 - val_loss: 1.1711\n",
            "Epoch 30/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 612us/step - accuracy: 0.5781 - loss: 1.0931 - val_accuracy: 0.5111 - val_loss: 1.2144\n",
            "Epoch 31/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m326s\u001b[0m 1s/step - accuracy: 0.7171 - loss: 0.7814 - val_accuracy: 0.5711 - val_loss: 1.1898\n",
            "Epoch 32/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 65ms/step - accuracy: 0.5938 - loss: 0.9817 - val_accuracy: 0.5778 - val_loss: 1.0711\n",
            "Epoch 33/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m267s\u001b[0m 992ms/step - accuracy: 0.7319 - loss: 0.7342 - val_accuracy: 0.5792 - val_loss: 1.1772\n",
            "Epoch 34/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 622us/step - accuracy: 0.6094 - loss: 0.8495 - val_accuracy: 0.6889 - val_loss: 1.2294\n",
            "Epoch 35/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m268s\u001b[0m 995ms/step - accuracy: 0.7435 - loss: 0.7023 - val_accuracy: 0.5772 - val_loss: 1.2211\n",
            "Epoch 36/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 633us/step - accuracy: 0.7656 - loss: 0.6475 - val_accuracy: 0.6000 - val_loss: 1.1995\n",
            "Epoch 37/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 994ms/step - accuracy: 0.7560 - loss: 0.6676 - val_accuracy: 0.5839 - val_loss: 1.2137\n",
            "Epoch 38/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 676us/step - accuracy: 0.7188 - loss: 0.7580 - val_accuracy: 0.5778 - val_loss: 1.3102\n",
            "Epoch 39/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m268s\u001b[0m 995ms/step - accuracy: 0.7675 - loss: 0.6322 - val_accuracy: 0.5873 - val_loss: 1.2341\n",
            "Epoch 40/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 615us/step - accuracy: 0.7031 - loss: 0.9200 - val_accuracy: 0.5556 - val_loss: 1.4297\n",
            "Epoch 41/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 992ms/step - accuracy: 0.7758 - loss: 0.6093 - val_accuracy: 0.5813 - val_loss: 1.2246\n",
            "Epoch 42/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 68ms/step - accuracy: 0.7344 - loss: 0.7838 - val_accuracy: 0.6000 - val_loss: 1.1430\n",
            "Epoch 43/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m266s\u001b[0m 989ms/step - accuracy: 0.7824 - loss: 0.5925 - val_accuracy: 0.5873 - val_loss: 1.2455\n",
            "Epoch 44/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 662us/step - accuracy: 0.7031 - loss: 0.7414 - val_accuracy: 0.6222 - val_loss: 1.1520\n",
            "Epoch 45/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 990ms/step - accuracy: 0.7906 - loss: 0.5687 - val_accuracy: 0.5876 - val_loss: 1.2592\n",
            "Epoch 46/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 623us/step - accuracy: 0.8125 - loss: 0.6000 - val_accuracy: 0.5556 - val_loss: 1.2917\n",
            "Epoch 47/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m266s\u001b[0m 990ms/step - accuracy: 0.8033 - loss: 0.5481 - val_accuracy: 0.5774 - val_loss: 1.3116\n",
            "Epoch 48/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 690us/step - accuracy: 0.7656 - loss: 0.6967 - val_accuracy: 0.6444 - val_loss: 1.1947\n",
            "Epoch 49/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m267s\u001b[0m 993ms/step - accuracy: 0.8110 - loss: 0.5225 - val_accuracy: 0.5915 - val_loss: 1.2692\n",
            "Epoch 50/50\n",
            "\u001b[1m269/269\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 642us/step - accuracy: 0.8438 - loss: 0.3896 - val_accuracy: 0.5333 - val_loss: 1.5788\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Fungsi untuk menampilkan grafik hasil pelatihan\n",
        "def plot_training_history(history):\n",
        "    # Grafik Loss\n",
        "    plt.figure(figsize=(12, 5))\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(history.history['loss'], label='Training Loss', color='blue')\n",
        "    plt.plot(history.history['val_loss'], label='Validation Loss', color='orange')\n",
        "    plt.title('Loss per Epoch')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.legend()\n",
        "\n",
        "    # Grafik Accuracy\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(history.history['accuracy'], label='Training Accuracy', color='green')\n",
        "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy', color='red')\n",
        "    plt.title('Accuracy per Epoch')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.show()\n",
        "\n",
        "# Menampilkan hasil pelatihan\n",
        "plot_training_history(history)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "Z_1CPHq4UVN-",
        "outputId": "f764037a-b642-45a6-a26a-26763ea1097c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Fungsi untuk plot akurasi dan loss\n",
        "def plot_results(history):\n",
        "    # Plot Akurasi\n",
        "    plt.figure(figsize=(12, 5))\n",
        "\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "    plt.title('Training and Validation Accuracy')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend()\n",
        "\n",
        "    # Plot Loss\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(history.history['loss'], label='Training Loss')\n",
        "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "    plt.title('Training and Validation Loss')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Contoh penggunaan, misalnya setelah melatih model\n",
        "plot_results(history)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "wfq5_GbNZYf6",
        "outputId": "517b2193-1a64-48c5-bc5d-a64e54517081"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f1JjqFBsk8S-",
        "outputId": "cc298e2f-ac40-4ed4-c5c6-3370c19c1908"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Data setelah normalisasi:\n",
            "[[-0.91766294]\n",
            " [-0.11470787]\n",
            " [-0.5161854 ]\n",
            " [-1.31914047]\n",
            " [ 0.6882472 ]\n",
            " [ 1.8926798 ]\n",
            " [ 0.28676967]]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Contoh data sebelum normalisasi\n",
        "data = np.array([\n",
        "    [0.8],\n",
        "    [1.0],\n",
        "    [0.9],\n",
        "    [0.7],\n",
        "    [1.2],\n",
        "    [1.5],\n",
        "    [1.1]\n",
        "])\n",
        "\n",
        "# Membuat instance dari StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Melakukan fit dan transformasi untuk menormalisasi data\n",
        "normalized_data = scaler.fit_transform(data)\n",
        "\n",
        "# Menampilkan data setelah dinormalisasi\n",
        "print(\"Data setelah normalisasi:\")\n",
        "print(normalized_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fp0t17yKrrEr",
        "outputId": "63f73721-340a-4645-cc51-429597781e55"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 28709 images belonging to 7 classes.\n",
            "Found 7178 images belonging to 7 classes.\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# Data Augmentation untuk training\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1./255,\n",
        "    rotation_range=30,\n",
        "    width_shift_range=0.2,\n",
        "    height_shift_range=0.2,\n",
        "    shear_range=0.2,\n",
        "    zoom_range=0.2,\n",
        "    horizontal_flip=True\n",
        ")\n",
        "\n",
        "# Data preprocessing untuk validasi\n",
        "validation_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "# Membuat generator untuk data training\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "    '/content/train',                # Folder dataset training\n",
        "    target_size=(48, 48),            # Ukuran gambar (48x48)\n",
        "    color_mode='grayscale',          # Gambar grayscale\n",
        "    batch_size=64,                   # Ukuran batch\n",
        "    class_mode='categorical'         # Klasifikasi multi-kelas\n",
        ")\n",
        "\n",
        "# Membuat generator untuk data validasi\n",
        "validation_generator = validation_datagen.flow_from_directory(\n",
        "    '/content/test',                 # Folder dataset validasi\n",
        "    target_size=(48, 48),            # Ukuran gambar (48x48)\n",
        "    color_mode='grayscale',          # Gambar grayscale\n",
        "    batch_size=64,                   # Ukuran batch\n",
        "    class_mode='categorical'         # Klasifikasi multi-kelas\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FBvougXWrvmj"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Compile model\n",
        "emotion_model.compile(\n",
        "    loss='categorical_crossentropy',      # Fungsi loss untuk multi-kelas\n",
        "    optimizer=Adam(learning_rate=0.0001), # Optimizer Adam dengan learning rate rendah\n",
        "    metrics=['accuracy']                  # Metrik evaluasi adalah akurasi\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xvqDv9nOrv7L",
        "outputId": "4856aa5d-946e-4cd1-906a-91b09de12cb9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train directory exists: True\n",
            "Validation directory exists: False\n",
            "Test directory exists: True\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "# Periksa keberadaan folder\n",
        "print(\"Train directory exists:\", os.path.exists('/content/train'))\n",
        "print(\"Validation directory exists:\", os.path.exists('/content/validation'))\n",
        "print(\"Test directory exists:\", os.path.exists('/content/test'))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qO1_aalPr1Ra"
      },
      "outputs": [],
      "source": [
        "# Membuat folder validation dan test jika tidak ada\n",
        "os.makedirs('/content/validation', exist_ok=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Path ke dataset utama\n",
        "dataset_dir = '/content/train'  # Ganti dengan lokasi dataset Anda\n",
        "\n",
        "if os.path.exists(dataset_dir):\n",
        "    print(\"Dataset ditemukan di:\", dataset_dir)\n",
        "    print(\"Subfolder yang tersedia:\", os.listdir(dataset_dir))\n",
        "else:\n",
        "    print(f\"Dataset tidak ditemukan di: {dataset_dir}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jzLg7qLEfB_f",
        "outputId": "9d45fd05-90e3-4276-c067-a02e2ed9cc67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset ditemukan di: /content/train\n",
            "Subfolder yang tersedia: ['disgust', 'surprise', 'angry', 'happy', 'fear', 'sad', 'neutral']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UDv7ql9Zr7lB"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import shutil\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Folder asal dan tujuan\n",
        "base_dir = '/content/train'  # Folder asal\n",
        "train_dir = '/content/train_split'\n",
        "val_dir = '/content/validation'\n",
        "test_dir = '/content/test'\n",
        "\n",
        "# Membuat folder baru\n",
        "os.makedirs(train_dir, exist_ok=True)\n",
        "os.makedirs(val_dir, exist_ok=True)\n",
        "os.makedirs(test_dir, exist_ok=True)\n",
        "\n",
        "# Membagi dataset untuk setiap kelas\n",
        "for class_name in os.listdir(base_dir):\n",
        "    class_path = os.path.join(base_dir, class_name)\n",
        "    if os.path.isdir(class_path):\n",
        "        # Membaca semua file dalam kelas\n",
        "        files = os.listdir(class_path)\n",
        "        train_files, val_test_files = train_test_split(files, test_size=0.4, random_state=42)\n",
        "        val_files, test_files = train_test_split(val_test_files, test_size=0.5, random_state=42)\n",
        "\n",
        "        # Buat folder kelas di train, val, dan test\n",
        "        os.makedirs(os.path.join(train_dir, class_name), exist_ok=True)\n",
        "        os.makedirs(os.path.join(val_dir, class_name), exist_ok=True)\n",
        "        os.makedirs(os.path.join(test_dir, class_name), exist_ok=True)\n",
        "\n",
        "        # Pindahkan file ke folder masing-masing\n",
        "        for file in train_files:\n",
        "            shutil.move(os.path.join(class_path, file), os.path.join(train_dir, class_name, file))\n",
        "        for file in val_files:\n",
        "            shutil.move(os.path.join(class_path, file), os.path.join(val_dir, class_name, file))\n",
        "        for file in test_files:\n",
        "            shutil.move(os.path.join(class_path, file), os.path.join(test_dir, class_name, file))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dcJAxVXbsEns"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# Data generator untuk training\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1./255,            # Normalisasi pixel ke skala 0-1\n",
        "    rotation_range=10,         # Rotasi acak hingga 10 derajat\n",
        "    width_shift_range=0.1,     # Perpindahan horizontal\n",
        "    height_shift_range=0.1,    # Perpindahan vertikal\n",
        "    shear_range=0.1,           # Shear image\n",
        "    zoom_range=0.1,            # Zoom in/out\n",
        "    horizontal_flip=True       # Flip horizontal\n",
        ")\n",
        "\n",
        "# Data generator untuk validation\n",
        "val_datagen = ImageDataGenerator(\n",
        "    rescale=1./255             # Hanya normalisasi\n",
        ")\n",
        "\n",
        "# Data generator untuk testing\n",
        "test_datagen = ImageDataGenerator(\n",
        "    rescale=1./255             # Hanya normalisasi\n",
        ")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GcYXYVl5sLAq",
        "outputId": "1cae87de-3df2-420f-c252-d2a474f46180"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train directory exists: True\n",
            "Train subdirectories: ['disgust', 'surprise', 'angry', 'happy', 'fear', 'sad', 'neutral']\n",
            "Images in class 'disgust': 261\n",
            "Images in class 'surprise': 1902\n",
            "Images in class 'angry': 2397\n",
            "Images in class 'happy': 4329\n",
            "Images in class 'fear': 2458\n",
            "Images in class 'sad': 2898\n",
            "Images in class 'neutral': 2979\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "# Periksa apakah ada gambar di folder train\n",
        "train_dir = '/content/train_split'\n",
        "print(\"Train directory exists:\", os.path.exists(train_dir))\n",
        "print(\"Train subdirectories:\", os.listdir(train_dir))\n",
        "\n",
        "# Periksa juga subfolder untuk setiap kelas\n",
        "for class_name in os.listdir(train_dir):\n",
        "    class_path = os.path.join(train_dir, class_name)\n",
        "    if os.path.isdir(class_path):\n",
        "        print(f\"Images in class '{class_name}':\", len(os.listdir(class_path)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HQAhDp-0sQUU",
        "outputId": "71850766-03fe-487a-e0b8-3c10e511c638"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 17224 images belonging to 7 classes.\n",
            "Found 0 images belonging to 7 classes.\n",
            "Found 12922 images belonging to 7 classes.\n"
          ]
        }
      ],
      "source": [
        "#Generator untuk training\n",
        "train_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "    train_dir,  # Path ke folder training\n",
        "    target_size=(48, 48),\n",
        "    color_mode='grayscale',\n",
        "    batch_size=64,\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n",
        "# Generator untuk validasi\n",
        "val_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "validation_generator = val_datagen.flow_from_directory(\n",
        "    '/content/val_split',  # Path ke folder validasi\n",
        "    target_size=(48, 48),\n",
        "    color_mode='grayscale',\n",
        "    batch_size=64,\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n",
        "# Generator untuk testing (jika ada)\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "test_generator = test_datagen.flow_from_directory(\n",
        "    '/content/test',  # Path ke folder testing\n",
        "    target_size=(48, 48),\n",
        "    color_mode='grayscale',\n",
        "    batch_size=64,\n",
        "    class_mode='categorical',\n",
        "    shuffle=False\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2KcpQ9wi8A8H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KBOLYI3Qs0Ld"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "from tensorflow.keras.models import load_model\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8taxlq1Vt6n2",
        "outputId": "55616f05-93c9-483b-851b-4c2ce86cd228"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data kelas 'disgust' berhasil dibagi!\n",
            "Data kelas 'surprise' berhasil dibagi!\n",
            "Data kelas 'angry' berhasil dibagi!\n",
            "Data kelas 'happy' berhasil dibagi!\n",
            "Data kelas 'fear' berhasil dibagi!\n",
            "Data kelas 'sad' berhasil dibagi!\n",
            "Data kelas 'neutral' berhasil dibagi!\n",
            "Pembagian data selesai!\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import shutil\n",
        "import random\n",
        "\n",
        "# Fungsi untuk membagi data ke dalam split\n",
        "def split_data(source_dir, train_dir, val_dir, test_dir, train_ratio, val_ratio, test_ratio):\n",
        "    # Ambil daftar kelas dari folder sumber\n",
        "    classes = os.listdir(source_dir)\n",
        "\n",
        "    for class_name in classes:\n",
        "        class_path = os.path.join(source_dir, class_name)  # Gabungkan ke path kelas\n",
        "        if os.path.isdir(class_path):  # Periksa apakah itu folder\n",
        "            # Membuat folder untuk masing-masing split jika belum ada\n",
        "            train_class_dir = os.path.join(train_dir, class_name)\n",
        "            val_class_dir = os.path.join(val_dir, class_name)\n",
        "            test_class_dir = os.path.join(test_dir, class_name)\n",
        "\n",
        "            os.makedirs(train_class_dir, exist_ok=True)\n",
        "            os.makedirs(val_class_dir, exist_ok=True)\n",
        "            os.makedirs(test_class_dir, exist_ok=True)\n",
        "\n",
        "            # Dapatkan daftar file dalam kelas ini\n",
        "            files = os.listdir(class_path)\n",
        "\n",
        "            # Filter hanya file gambar (misalnya .jpg, .png)\n",
        "            image_files = [f for f in files if f.lower().endswith(('.jpg', '.png', '.jpeg'))]\n",
        "\n",
        "            # Mengacak urutan file untuk pembagian data yang lebih baik\n",
        "            random.shuffle(image_files)\n",
        "\n",
        "            # Hitung jumlah data untuk masing-masing split\n",
        "            total_files = len(image_files)\n",
        "            train_size = int(total_files * train_ratio)\n",
        "            val_size = int(total_files * val_ratio)\n",
        "            test_size = total_files - train_size - val_size\n",
        "\n",
        "            # Bagikan file ke masing-masing split\n",
        "            for i, file_name in enumerate(image_files):\n",
        "                file_path = os.path.join(class_path, file_name)\n",
        "                if i < train_size:\n",
        "                    target_file = os.path.join(train_class_dir, file_name)\n",
        "                elif i < train_size + val_size:\n",
        "                    target_file = os.path.join(val_class_dir, file_name)\n",
        "                else:\n",
        "                    target_file = os.path.join(test_class_dir, file_name)\n",
        "\n",
        "                # Salin file ke folder tujuan\n",
        "                shutil.copy(file_path, target_file)\n",
        "            print(f\"Data kelas '{class_name}' berhasil dibagi!\")\n",
        "\n",
        "# Tentukan path folder\n",
        "source_dir = '/content/train'  # Ganti dengan path dataset Anda\n",
        "train_split_dir = '/content/train_split'  # Folder tujuan data latih\n",
        "val_split_dir = '/content/val_split'  # Folder tujuan data validasi\n",
        "test_split_dir = '/content/test_split'  # Folder tujuan data uji\n",
        "\n",
        "# Rasio pembagian data\n",
        "train_ratio = 0.7\n",
        "val_ratio = 0.15\n",
        "test_ratio = 0.15\n",
        "\n",
        "# Jalankan fungsi untuk membagi data\n",
        "split_data(source_dir, train_split_dir, val_split_dir, test_split_dir, train_ratio, val_ratio, test_ratio)\n",
        "\n",
        "print(\"Pembagian data selesai!\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DDwlSNc5s_1-"
      },
      "outputs": [],
      "source": [
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1.0/255,\n",
        "    rotation_range=30,\n",
        "    shear_range=0.2,\n",
        "    zoom_range=0.2,\n",
        "    horizontal_flip=True\n",
        ")\n",
        "\n",
        "test_datagen = ImageDataGenerator(rescale=1.0/255)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "sbbB87HLvBsh",
        "outputId": "ce32668c-ced9-4294-d5d1-28822a7d3f58"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Hitung confusion matrix\n",
        "cm = confusion_matrix(y_true, y_pred_classes)\n",
        "\n",
        "# Menampilkan confusion matrix\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_names)\n",
        "disp.plot(cmap=plt.cm.Blues, xticks_rotation=45)  # Tambahkan rotasi untuk nama kelas\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import load_model\n",
        "\n",
        "# Muat model yang sudah dilatih\n",
        "model = load_model('model.keras')  # Ganti dengan path model Anda\n"
      ],
      "metadata": {
        "id": "bt4p-WcQby8C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sCEHOQO6fYBK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a467f3ec-b359-486f-c83e-aa8e740b2697"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch\tTrain Acc\tVal Acc\tTrain Loss\tVal Loss\n",
            "1\t0.2699\t\t0.3473\t1.7724\t\t1.6380\n",
            "2\t0.1250\t\t0.2444\t1.7590\t\t1.7661\n",
            "3\t0.3931\t\t0.4352\t1.5603\t\t1.4497\n",
            "4\t0.4844\t\t0.4667\t1.4166\t\t1.5596\n",
            "5\t0.4607\t\t0.4928\t1.4061\t\t1.3450\n",
            "6\t0.5156\t\t0.4000\t1.1739\t\t1.3351\n",
            "7\t0.5001\t\t0.5100\t1.3052\t\t1.2854\n",
            "8\t0.5469\t\t0.6000\t1.1716\t\t1.1999\n",
            "9\t0.5232\t\t0.5265\t1.2408\t\t1.2473\n",
            "10\t0.5156\t\t0.5556\t1.2118\t\t1.1680\n",
            "11\t0.5503\t\t0.5488\t1.1793\t\t1.1997\n",
            "12\t0.4375\t\t0.5556\t1.2756\t\t1.4113\n",
            "13\t0.5638\t\t0.5458\t1.1379\t\t1.1832\n",
            "14\t0.5781\t\t0.5556\t1.1242\t\t1.2641\n",
            "15\t0.5864\t\t0.5597\t1.0937\t\t1.1692\n",
            "16\t0.5781\t\t0.5778\t1.1701\t\t1.1818\n",
            "17\t0.5990\t\t0.5583\t1.0531\t\t1.1784\n",
            "18\t0.5625\t\t0.4222\t1.0358\t\t1.5142\n",
            "19\t0.6153\t\t0.5600\t1.0130\t\t1.1834\n",
            "20\t0.5781\t\t0.4889\t1.0382\t\t1.4810\n",
            "21\t0.6273\t\t0.5564\t0.9822\t\t1.1693\n",
            "22\t0.7188\t\t0.6000\t0.7593\t\t1.1015\n",
            "23\t0.6499\t\t0.5734\t0.9361\t\t1.1429\n",
            "24\t0.6719\t\t0.6444\t0.8663\t\t0.9027\n",
            "25\t0.6705\t\t0.5760\t0.8827\t\t1.1440\n",
            "26\t0.7344\t\t0.5556\t0.7220\t\t1.0570\n",
            "27\t0.6747\t\t0.5679\t0.8711\t\t1.2066\n",
            "28\t0.6875\t\t0.4444\t0.8332\t\t1.6442\n",
            "29\t0.6916\t\t0.5699\t0.8234\t\t1.1711\n",
            "30\t0.5781\t\t0.5111\t1.0931\t\t1.2144\n",
            "31\t0.7068\t\t0.5711\t0.7943\t\t1.1898\n",
            "32\t0.5938\t\t0.5778\t0.9817\t\t1.0711\n",
            "33\t0.7226\t\t0.5792\t0.7477\t\t1.1772\n",
            "34\t0.6094\t\t0.6889\t0.8495\t\t1.2294\n",
            "35\t0.7388\t\t0.5772\t0.7137\t\t1.2211\n",
            "36\t0.7656\t\t0.6000\t0.6475\t\t1.1995\n",
            "37\t0.7471\t\t0.5839\t0.6845\t\t1.2137\n",
            "38\t0.7188\t\t0.5778\t0.7580\t\t1.3102\n",
            "39\t0.7576\t\t0.5873\t0.6550\t\t1.2341\n",
            "40\t0.7031\t\t0.5556\t0.9200\t\t1.4297\n",
            "41\t0.7675\t\t0.5813\t0.6328\t\t1.2246\n",
            "42\t0.7344\t\t0.6000\t0.7838\t\t1.1430\n",
            "43\t0.7789\t\t0.5873\t0.6082\t\t1.2455\n",
            "44\t0.7031\t\t0.6222\t0.7414\t\t1.1520\n",
            "45\t0.7890\t\t0.5876\t0.5741\t\t1.2592\n",
            "46\t0.8125\t\t0.5556\t0.6000\t\t1.2917\n",
            "47\t0.7969\t\t0.5774\t0.5581\t\t1.3116\n",
            "48\t0.7656\t\t0.6444\t0.6967\t\t1.1947\n",
            "49\t0.8008\t\t0.5915\t0.5453\t\t1.2692\n",
            "50\t0.8438\t\t0.5333\t0.3896\t\t1.5788\n"
          ]
        }
      ],
      "source": [
        "# Menampilkan hasil training dan validation akurasi dan loss setiap epoch secara singkat\n",
        "def print_epoch_summary(history):\n",
        "    epochs = len(history.history['accuracy'])  # Menentukan jumlah epoch\n",
        "    print(\"Epoch\\tTrain Acc\\tVal Acc\\tTrain Loss\\tVal Loss\")\n",
        "    for epoch in range(epochs):\n",
        "        print(f\"{epoch+1}\\t{history.history['accuracy'][epoch]:.4f}\\t\\t\"\n",
        "              f\"{history.history['val_accuracy'][epoch]:.4f}\\t\"\n",
        "              f\"{history.history['loss'][epoch]:.4f}\\t\\t\"\n",
        "              f\"{history.history['val_loss'][epoch]:.4f}\")\n",
        "\n",
        "# Contoh penggunaan, misalnya setelah melatih model\n",
        "print_epoch_summary(history)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "v5ch-vJwszzT",
        "outputId": "0829b758-26ce-49fa-dce7-d59a61aca426"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m433s\u001b[0m 966ms/step - accuracy: 0.5673 - loss: 1.1342 - val_accuracy: 0.5716 - val_loss: 1.1337\n",
            "Epoch 2/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 141us/step - accuracy: 0.5156 - loss: 1.2060 - val_accuracy: 0.6000 - val_loss: 0.8090\n",
            "Epoch 3/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m443s\u001b[0m 971ms/step - accuracy: 0.5786 - loss: 1.1049 - val_accuracy: 0.5780 - val_loss: 1.1088\n",
            "Epoch 4/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 122us/step - accuracy: 0.6250 - loss: 1.0185 - val_accuracy: 0.6000 - val_loss: 0.9695\n",
            "Epoch 5/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m433s\u001b[0m 967ms/step - accuracy: 0.6063 - loss: 1.0541 - val_accuracy: 0.5765 - val_loss: 1.1088\n",
            "Epoch 6/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 134us/step - accuracy: 0.6562 - loss: 0.9870 - val_accuracy: 0.6000 - val_loss: 1.3984\n",
            "Epoch 7/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m432s\u001b[0m 965ms/step - accuracy: 0.6040 - loss: 1.0444 - val_accuracy: 0.5901 - val_loss: 1.0821\n",
            "Epoch 8/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 140us/step - accuracy: 0.5625 - loss: 1.0352 - val_accuracy: 0.6000 - val_loss: 0.9634\n",
            "Epoch 9/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m434s\u001b[0m 968ms/step - accuracy: 0.6260 - loss: 0.9995 - val_accuracy: 0.5872 - val_loss: 1.0865\n",
            "Epoch 10/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 126us/step - accuracy: 0.6875 - loss: 1.0122 - val_accuracy: 0.5000 - val_loss: 1.5234\n",
            "Epoch 11/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m424s\u001b[0m 947ms/step - accuracy: 0.6317 - loss: 0.9746 - val_accuracy: 0.5957 - val_loss: 1.0898\n",
            "Epoch 12/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 30ms/step - accuracy: 0.7188 - loss: 0.8511 - val_accuracy: 0.6000 - val_loss: 0.8589\n",
            "Epoch 13/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m435s\u001b[0m 963ms/step - accuracy: 0.6437 - loss: 0.9487 - val_accuracy: 0.6030 - val_loss: 1.0599\n",
            "Epoch 14/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 133us/step - accuracy: 0.6719 - loss: 0.8792 - val_accuracy: 0.6000 - val_loss: 1.0121\n",
            "Epoch 15/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m427s\u001b[0m 952ms/step - accuracy: 0.6532 - loss: 0.9174 - val_accuracy: 0.6083 - val_loss: 1.0587\n",
            "Epoch 16/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 206us/step - accuracy: 0.7188 - loss: 0.7522 - val_accuracy: 0.7000 - val_loss: 1.2837\n",
            "Epoch 17/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m437s\u001b[0m 974ms/step - accuracy: 0.6611 - loss: 0.8918 - val_accuracy: 0.6098 - val_loss: 1.0516\n",
            "Epoch 18/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 132us/step - accuracy: 0.5938 - loss: 1.0308 - val_accuracy: 0.6000 - val_loss: 0.9556\n",
            "Epoch 19/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m433s\u001b[0m 967ms/step - accuracy: 0.6725 - loss: 0.8711 - val_accuracy: 0.6109 - val_loss: 1.0579\n",
            "Epoch 20/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 129us/step - accuracy: 0.6562 - loss: 0.8919 - val_accuracy: 0.7000 - val_loss: 0.5560\n",
            "Epoch 21/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m435s\u001b[0m 971ms/step - accuracy: 0.6861 - loss: 0.8419 - val_accuracy: 0.6060 - val_loss: 1.0629\n",
            "Epoch 22/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 29ms/step - accuracy: 0.6875 - loss: 0.8355 - val_accuracy: 0.8000 - val_loss: 0.9387\n",
            "Epoch 23/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m434s\u001b[0m 968ms/step - accuracy: 0.6881 - loss: 0.8334 - val_accuracy: 0.6097 - val_loss: 1.0571\n",
            "Epoch 24/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 136us/step - accuracy: 0.6875 - loss: 0.7937 - val_accuracy: 0.5000 - val_loss: 1.1221\n",
            "Epoch 25/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m434s\u001b[0m 970ms/step - accuracy: 0.6980 - loss: 0.8079 - val_accuracy: 0.6109 - val_loss: 1.0634\n",
            "Epoch 26/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 128us/step - accuracy: 0.6250 - loss: 0.8709 - val_accuracy: 0.5000 - val_loss: 1.1779\n",
            "Epoch 27/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m433s\u001b[0m 966ms/step - accuracy: 0.7040 - loss: 0.7911 - val_accuracy: 0.6091 - val_loss: 1.0546\n",
            "Epoch 28/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 140us/step - accuracy: 0.5938 - loss: 0.9466 - val_accuracy: 0.5000 - val_loss: 1.6306\n",
            "Epoch 29/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m433s\u001b[0m 966ms/step - accuracy: 0.7053 - loss: 0.7872 - val_accuracy: 0.6126 - val_loss: 1.0519\n",
            "Epoch 30/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 134us/step - accuracy: 0.6875 - loss: 0.8428 - val_accuracy: 0.7000 - val_loss: 0.6232\n",
            "Epoch 31/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m432s\u001b[0m 965ms/step - accuracy: 0.7172 - loss: 0.7568 - val_accuracy: 0.6084 - val_loss: 1.0744\n",
            "Epoch 32/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 170us/step - accuracy: 0.7500 - loss: 0.7517 - val_accuracy: 0.6000 - val_loss: 1.3238\n",
            "Epoch 33/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m442s\u001b[0m 966ms/step - accuracy: 0.7297 - loss: 0.7295 - val_accuracy: 0.6119 - val_loss: 1.0839\n",
            "Epoch 34/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 30ms/step - accuracy: 0.7031 - loss: 0.7159 - val_accuracy: 0.7000 - val_loss: 1.0887\n",
            "Epoch 35/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m487s\u001b[0m 967ms/step - accuracy: 0.7329 - loss: 0.7141 - val_accuracy: 0.6151 - val_loss: 1.0810\n",
            "Epoch 36/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 130us/step - accuracy: 0.7188 - loss: 0.6748 - val_accuracy: 0.6000 - val_loss: 1.0271\n",
            "Epoch 37/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m441s\u001b[0m 968ms/step - accuracy: 0.7366 - loss: 0.6983 - val_accuracy: 0.6179 - val_loss: 1.0612\n",
            "Epoch 38/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 131us/step - accuracy: 0.6250 - loss: 0.9312 - val_accuracy: 0.7000 - val_loss: 0.8578\n",
            "Epoch 39/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m437s\u001b[0m 957ms/step - accuracy: 0.7422 - loss: 0.6889 - val_accuracy: 0.6119 - val_loss: 1.0754\n",
            "Epoch 40/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 129us/step - accuracy: 0.6875 - loss: 0.7892 - val_accuracy: 0.8000 - val_loss: 0.3970\n",
            "Epoch 41/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m428s\u001b[0m 955ms/step - accuracy: 0.7496 - loss: 0.6664 - val_accuracy: 0.6119 - val_loss: 1.1019\n",
            "Epoch 42/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 126us/step - accuracy: 0.7812 - loss: 0.7242 - val_accuracy: 0.9000 - val_loss: 0.9346\n",
            "Epoch 43/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m440s\u001b[0m 954ms/step - accuracy: 0.7535 - loss: 0.6639 - val_accuracy: 0.6126 - val_loss: 1.0965\n",
            "Epoch 44/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 130us/step - accuracy: 0.7500 - loss: 0.7943 - val_accuracy: 0.5000 - val_loss: 0.9931\n",
            "Epoch 45/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m426s\u001b[0m 951ms/step - accuracy: 0.7570 - loss: 0.6505 - val_accuracy: 0.6151 - val_loss: 1.0932\n",
            "Epoch 46/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 130us/step - accuracy: 0.6250 - loss: 0.9364 - val_accuracy: 0.6000 - val_loss: 1.3372\n",
            "Epoch 47/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m427s\u001b[0m 953ms/step - accuracy: 0.7626 - loss: 0.6361 - val_accuracy: 0.6212 - val_loss: 1.0843\n",
            "Epoch 48/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 132us/step - accuracy: 0.8281 - loss: 0.5465 - val_accuracy: 0.6000 - val_loss: 1.0089\n",
            "Epoch 49/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m440s\u001b[0m 950ms/step - accuracy: 0.7714 - loss: 0.6258 - val_accuracy: 0.6162 - val_loss: 1.1167\n",
            "Epoch 50/50\n",
            "\u001b[1m448/448\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 130us/step - accuracy: 0.8438 - loss: 0.4691 - val_accuracy: 0.4000 - val_loss: 2.3020\n"
          ]
        }
      ],
      "source": [
        "# Melatih model\n",
        "history = emotion_model.fit(\n",
        "    train_generator,\n",
        "    steps_per_epoch=train_generator.samples // train_generator.batch_size,\n",
        "    epochs=50,  # Jumlah epoch\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=validation_generator.samples // validation_generator.batch_size\n",
        ")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4_UOva-wgn7",
        "outputId": "46be10eb-1dbe-47fd-f784-fa6c6791dcdf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah gambar pada training data: 28709\n",
            "Jumlah gambar pada validation data: 7178\n"
          ]
        }
      ],
      "source": [
        "print(\"Jumlah gambar pada training data:\", train_generator.samples)\n",
        "print(\"Jumlah gambar pada validation data:\", validation_generator.samples)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jcv57k4RsU_i"
      },
      "outputs": [],
      "source": [
        "emotion_model.save('model.keras')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2-7Ionh-yeXj"
      },
      "outputs": [],
      "source": [
        "from keras.saving import save_model\n",
        "save_model(emotion_model, 'model.keras')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eLyXjk7wnsOO"
      },
      "outputs": [],
      "source": [
        "#Saving the model\n",
        "emotion_model.save('model.keras')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eWOs06hooxST"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM81C4+wz1VRGIHArX7uFAU",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}